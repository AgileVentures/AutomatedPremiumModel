This is an in-progress prototype for automating the running of the current ML prediction for premium signup

You will need to install the packages httr, httptest, anytime and jsonlite, i.e.
install.packages("httr")
install.packages("httptest")
install.packages("jsonlite")
install.packages("anytime")

To run the existing tests then do:

RScript run_tests.R

You should get something like this output:

Loading required package: testthat
Loading required package: methods
testing utilities: ............

DONE ===========================================================================

You can run the code in basic_functionality_so_far.R in something like Rstudio and examine the results in the variable results to see what can be gleaned so far from the history of the #general
channel, however you will need to insert a valid token into test_token, ie modify this line

test_token <-Sys.getenv('PRODUCTION_SLACK_AUTH_TOKEN')

where you replace Sys.getenv with a real valid token that will work on our slack #general channel, OR you arrange for a valid token to exist in the environmental variable
PRODUCTION_SLACK_AUTH_TOKEN via some mechanism such as bash_rc.


So far, and to do:

done - Code that can fetch a channel's history between dates
done - Make code to Fetch a list of all relevant channels to mine for history
done - Make code to Fetch all relevant channels' history -- and build a running dataframe of such history
done - Make code to calculate the relevant features from the dataframe of history, ie, a user's aggregate "posts" during week 1, week 2, and week 3, and build a dataframe of it
done - Make code to fetch a list of all users
done - Make code to cross link the list of all users data, ie emai land username, with the dataframe of relevant features from history (week1, week2, week3)
done - Run feature dataframe through ML model, ie adaboost, etc and get results


to do:

*  Make code to send message to @tansaku on slack about week's results (ie, using slackr), and some results to #data-mining (ie, with no emails)

* Test the code that fetches a channel's history for robustness to errors like rate limiting, internet weather, etc (right now a spike is in place that seems to do parts of this)


------------------------------------------------

Now, the purpose of this code is to be deployed to a server to enable automatic running on a schedule (say every Sunday).  Currently, we have created a VM in azure with steps similar to this:

references:
https://www.digitalocean.com/community/tutorials/how-to-install-r-on-ubuntu-16-04-2
So first create a ubuntu vm box in azure based off ubuntu 16.04 lts
Then open a ssh session like so for a user who has 'root' access in your vm :
ssh michael@automatedpremium-production
In ssh session:
sudo add-apt-repository 'deb [arch=amd64,i386] https://cran.rstudio.com/bin/linux/ubuntu xenial/'
sudo apt-get update
sudo apt-get install r-base
Then run
Rscript --version
You should see like this:
R scripting front-end version 3.4.2 (2017-09-28)
Then do the following steps:
git clone https://github.com/AgileVentures/AutomatedPremiumModel
sudo chown michael:michael /usr/local/lib/R/site-library #so that you have rights to install
cd AutomatedPremiumModel/
sudo apt-get install libcurl4-openssl-dev
sudo apt-get install libssl-dev
Rscript install.R
Rscript run_tests.R
And you might see a failure or so, but as of now that is okay, as long as the apparatus seemed to fail while still
loading libraries.
Then open a new terminal tab and put the csv files in the directory on the remote vm similar to so:
scp av_members.csv michael@automatedpremium-production:/home/michael/AutomatedPremiumModel
scp data.csv michael@automatedpremium-production:/home/michael/AutomatedPremiumModel
Then to run the very basic code so far:
PRODUCTION_SLACK_AUTH_TOKEN='put your api token' Rscript basic_functionality_so_far.R
You'll probably see alot of messages about timeouts and waiting but when the model finishes it should be something like this:
[1] "the top 10 free members that might signup are: "
 [1] "roschaefer"         "joaopereira"        "sdas4"
 [4] "domenicoangilletta" "ahalle"             "hasnutech"
 [7] "pcaston"            "msheinb1"           "nirmalkumarb94"

 We have also enabled Sam to access the said box above by having michael carry out these instructions:

 When you have root access and want to add another user who can sudo:
 ssh into the box:
 ssh michael@automatedpremium-production
 add a user:
 sudo adduser sam
 and fill out form with password.  remit password to sam
 then edit the config file as follows:
 sudo vi /etc/ssh/sshd_config
 At the end of this file add
 PermitRootLogin yes
 AllowUsers michael sam
 Note that we added both michael and sam here.
 Create .ssh directory for sam user:
 mkdir /home/sam/.ssh
 Then edit the file:
 sudo vi /home/sam/.ssh/authorized_keys
 To this file add sam's public key (making sure ssh is at the start)
 Give sam back ownership of his folder and file
 sudo chown sam:sam /home/sam/.ssh/authorized_keys
 sudo chown sam:sam /home/sam/.ssh
 Then add sam to the sudoer group:
 sudo usermod -aG sudo sam
 Then run the service to make ssh changes be taken up:
 sudo service ssh reload
 Now sam should be able to ssh in with a proper configuration on his side
